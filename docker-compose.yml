services:
  redis:
    image: redis:alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 2

  rabbitmq:
    image: rabbitmq:3
    ports:
      - "5672:5672"
      - "15672:15762"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:latest
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_PORT: 5432
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  celery_worker:
    build:
      context: ./
      dockerfile: worker.Dockerfile
    command:
      - sh -c "sleep 30 && celery -A jt worker --loglevel=info"
    volumes:
      - .:/code
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    entrypoint: ["bash", "/code/entrypoint_worker.sh"]
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_PORT: 5432
      TASK_MODULE: jt
      LOG_LEVEL: info
    healthcheck:
      test: ["CMD-SHELL", "celery -A jt inspect ping -d celery@$$HOSTNAME || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  backend:
    build:
      context: ./
      dockerfile: web.Dockerfile
    volumes:
      - .:/code
      - ./static:/code/static  # Ensure static files are mounted
      - ./media:/code/media    # Ensure media files are mounted
    ports:
      - "8001:8000"
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      celery_worker:
        condition: service_healthy
    entrypoint: ["bash", "/code/entrypoint_web.sh"]
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_PORT: 5432
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/admin"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf  # Mount your nginx.conf
      - ./static:/code/static  # Mount static files to Nginx container
      - ./media:/code/media    # Mount media files to Nginx container
    depends_on:
      backend:
        condition: service_healthy


volumes:
  postgres_data: